/*
Extra exercise (Strings and file handling)
--------------------------------------------------------------------------------------------------------------
In the year 2097, the president of the United States of Europe doesn’t have the time to write his own
political speeches because he is busy hosting a lottery show on TV. His secretary has asked you to make a
computer program which can write political speeches by combining popular clichés randomly.

A statement is generated by combining randomly selected phrases from each of the categories G, A, S,
and V below according to the scheme G - A - S - V - G - A - S. For example:

“My improved freedom benefits our common responsible national security.”
 
Hint: The function errno_t rand_s(unsigned int &n) will give you a random number in the interval from 0
to UINT_MAX. Use this function to choose a cliché from a category containing n clichés. Write:
#define _CRT_RAND_S
#include <stdlib.h>
statements at the top of your program to get access to these functions.

Remark: There is a vector template available in C++, but at this phase we don’t know it, so
use ordinary string (maybe an array of strings) to store words.
*/

#define _CRT_RAND_S
#include <stdlib.h>
#include <iostream>
#include <fstream>
#include <string>
#include <vector>

using namespace std;

#ifdef _DEBUG // Active only in Debug Configuration
#define _CRTDBG_MAP_ALLOC // Visual Studio Mem Leak detector activated
#include <crtdbg.h>
#endif

class WordPool {
public:
	WordPool(const string string0 = "") {
		word = string0;
	}

	WordPool(const WordPool& string0) {
		word = string0;
	}

	~WordPool() {
		//cout << "('" << word << "' to be destroyed -->";
		//cout << " done)" << endl;
	}

	WordPool operator+(WordPool& string0) {
		WordPool aux(*this);

		aux.word = aux.word + " " + string0.GetRandom();
		word = GetRandom();

		return aux;
	}

	operator const string& () const {
		return word;
	}

	void fill (const string &letter, ifstream& input_file) {
		string line;
		const string tag = "[" + letter + "]";

		while (getline(input_file, line)) {
			if (line == tag) {
				while (getline(input_file, line) && !line.empty()) {
					words.push_back(line);
					line_count++;
				}
				break;
			}
		}
		word = GetRandom();
	}

	string GetRandom() {
		string rand_string;
		if (!words.empty()) {

			unsigned int number;
			errno_t err;

			err = rand_s(&number);
			if (err == 0) {
				unsigned int random_num = (unsigned int) ((double)number / ((double)UINT_MAX + 1) * line_count);
				rand_string = words[random_num];
			}
			else {
				cout << "rand_s function error..." << endl;
			}
		}
		return rand_string;
	}

private:
	vector<string> words;
	int line_count = 0;
	string word;
};

string giveStatement(string filename) {
	WordPool g, a, s, v;
	ifstream inputFile(filename);

	g.fill("G", inputFile); a.fill("A", inputFile); s.fill("S", inputFile); v.fill("V", inputFile);

	return g + a + s + v + g + a + s;
}

int main(void) {

	cout << giveStatement("oracle.dat") << endl << endl;

#ifdef _DEBUG
	if (_CrtDumpMemoryLeaks())
		cout << "WARNING: There was a memory leak in your program" << endl;
	else
		cout << "Your program has no memory leaks, congratulations!" << endl;
#endif

	system("PAUSE");

	return 0;
}
